{"version":3,"sources":["serviceWorker.ts","components/Nav/MobileProvider.tsx","components/Nav/CardActionAreaLink.tsx","agent.tsx","components/CredentialCardContent/PostCredential.tsx","components/CredentialCardContent/ProfileCredential.tsx","components/CredentialCardContent/ReactionCredential.tsx","components/CredentialCardContent/MessageCredential.tsx","components/CredentialCard.tsx","components/Nav/AppBar.tsx","views/Credentials.tsx","components/Nav/ListItemLink.tsx","components/Identity.tsx","views/Identities.tsx","views/ManagedIdentities.tsx","components/ProfileDialog.tsx","views/Identity.tsx","views/Credential.tsx","views/Settings.tsx","App.tsx","theme.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","MobileContext","React","createContext","mobileOpen","setMobileOpen","useMobile","useContext","MobileProvider","children","useState","Provider","value","CardActionAreaLink","props","className","onClick","to","CardActionArea","component","forwardRef","ref","exact","innerRef","url","process","apiKey","enabledMethods","defaultAgent","createAgent","plugins","AgentRestClient","headers","Authorization","AgentContext","agent","authenticatedDid","setApiKey","key","setUrl","getIdentityProfile","did","Promise","reject","useAgent","AgentProvider","setAgent","useEffect","a","configureAgent","dataStoreORMGetVerifiableCredentials","where","column","order","direction","result","length","verifiableCredential","credentialSubject","name","nickname","picture","useStyles","makeStyles","theme","avatar","width","height","display","link","marginRight","spacing","PostCredential","credential","issuer","subject","classes","CardContent","comment","Typography","variant","color","Link","href","Avatar","src","ProfileCredential","gutterBottom","Grid","container","Object","keys","map","type","item","xs","sm","ReactionCredential","emoji","MessageCredential","content","CredentialPostCard","contents","loading","setLoading","id","setIssuer","undefined","setSubject","all","then","profiles","finally","LinearProgress","includes","Card","elevation","CardHeader","title","subheader","formatDistanceToNow","Date","parse","issuanceDate","replace","REACT_APP_HOST","createStyles","flexGrow","appBar","breakpoints","up","marginLeft","menuButton","box","flex","flexDirection","AppBarTabs","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Credentials","credentials","setCredentials","Container","maxWidth","justify","hash","CredentialCard","ListItemLink","selected","ListItem","button","Identity","identity","setIdentity","ListItemAvatar","ListItemText","primary","secondary","Identities","identities","setIdentities","dataStoreORMGetIdentities","List","ManagedIdentities","identityManagerGetIdentities","form","margin","formControl","marginTop","minWidth","select","alignItems","formControlLabel","ProfileDialog","history","useHistory","setName","setNickname","saveProfileInfo","Error","uniqId","shortId","generate","createVerifiableCredential","toISOString","save","proofFormat","onClose","push","console","error","Dialog","fullScreen","open","aria-labelledby","DialogTitle","DialogContent","TextField","label","onChange","e","target","fullWidth","DialogActions","Button","autoFocus","header","padding","collapse","expand","transform","transition","transitions","create","duration","shortest","expandOpen","useParams","expanded","setExpanded","useTheme","setValue","useMediaQuery","down","openProfileModal","setOpenProfileModal","Tabs","event","newValue","indicatorColor","textColor","Tab","CardActions","clsx","aria-expanded","Collapse","in","timeout","unmountOnExit","size","Credential","Settings","root","fab","bottom","right","drawer","flexShrink","toolbar","mixins","drawerPaper","paddingTop","ResponsiveDrawer","credentialsMatch","useRouteMatch","identitiesMatch","managedIdentitiesMatch","settingsMatch","identityMatch","Divider","ListItemIcon","document","body","CssBaseline","Hidden","smUp","implementation","Drawer","anchor","paper","ModalProps","keepMounted","xsDown","path","render","createMuiTheme","palette","deepOrange","green","shape","borderRadius","ReactDOM","StrictMode","ThemeProvider","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.299626b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useContext } from \"react\";\n\ninterface MobileContextValue {\n  mobileOpen: boolean,\n  setMobileOpen: (value: boolean) => void\n}\n\nexport const MobileContext = React.createContext<MobileContextValue>({mobileOpen: false, setMobileOpen: () => {}});\nexport const useMobile = () => useContext(MobileContext);\n\nconst MobileProvider: React.FC = ({children}) => {\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  return (<MobileContext.Provider value={{\n    mobileOpen,\n    setMobileOpen\n  }}>\n    {children}\n  </MobileContext.Provider>)\n}\nexport default MobileProvider","import React, { forwardRef } from 'react'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport { NavLink, NavLinkProps } from 'react-router-dom'\n\nexport interface Props {\n  className?: string\n  to?: string | null // because the InferProps props allows alows null value\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst CardActionAreaLink: React.FC<Props> = props => {\n  const { className, onClick, to, children } = props\n\n  if (!to || typeof to !== 'string') {\n    return (\n      <CardActionArea\n        className={className}\n        children={children}\n        onClick={onClick}\n      />\n    )\n  }\n\n  return (\n    <CardActionArea\n      className={className}\n      children={children}\n      component={forwardRef((props: NavLinkProps, ref: any) => <NavLink exact {...props} innerRef={ref} />)}\n      to={to}\n    />\n  )\n}\n\nexport default CardActionAreaLink\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { createAgent, TAgent, IDataStore, IIdentityManager, IKeyManager, IResolver } from 'daf-core'\nimport { ICredentialIssuer } from 'daf-w3c'\nimport { IDataStoreORM } from 'daf-typeorm'\nimport { AgentRestClient } from 'daf-rest'\nimport { IdentityProfile } from './types'\n\nconst url = `${process.env.REACT_APP_AGENT_URL}`\nconst apiKey = `${process.env.REACT_APP_AGENT_API_KEY}`\nconst enabledMethods = [\n  'keyManagerGetKeyManagementSystems',\n  'keyManagerCreateKey',\n  'keyManagerGetKey',\n  'keyManagerDeleteKey',\n  'keyManagerImportKey',\n  'keyManagerEncryptJWE',\n  'keyManagerDecryptJWE',\n  'keyManagerSignJWT',\n  'keyManagerSignEthTX',\n  'identityManagerGetProviders',\n  'identityManagerGetIdentities',\n  'identityManagerGetIdentity',\n  'identityManagerCreateIdentity',\n  'identityManagerGetOrCreateIdentity',\n  'identityManagerImportIdentity',\n  'identityManagerDeleteIdentity',\n  'identityManagerAddKey',\n  'identityManagerRemoveKey',\n  'identityManagerAddService',\n  'identityManagerRemoveService',\n  'resolveDid',\n  'dataStoreSaveMessage',\n  'dataStoreSaveVerifiableCredential',\n  'dataStoreSaveVerifiablePresentation',\n  'dataStoreORMGetIdentities',\n  'dataStoreORMGetIdentitiesCount',\n  'dataStoreORMGetMessages',\n  'dataStoreORMGetMessagesCount',\n  'dataStoreORMGetVerifiableCredentialsByClaims',\n  'dataStoreORMGetVerifiableCredentialsByClaimsCount',\n  'dataStoreORMGetVerifiableCredentials',\n  'dataStoreORMGetVerifiableCredentialsCount',\n  'dataStoreORMGetVerifiablePresentations',\n  'dataStoreORMGetVerifiablePresentationsCount',\n  'handleMessage',\n  'sendMessageDIDCommAlpha1',\n  'createVerifiablePresentation',\n  'createVerifiableCredential',\n  'createSelectiveDisclosureRequest',\n  'getVerifiableCredentialsForSdr',\n  'validatePresentationAgainstSdr',\n]\n\ntype Agent = IDataStore & IDataStoreORM & ICredentialIssuer & IIdentityManager & IKeyManager & IResolver\n\ninterface Context {\n  agent: TAgent<Agent>,\n  authenticatedDid: string | null,\n  url: string\n  apiKey: string\n  setUrl: (url: string) => void\n  setApiKey: (apiKey: string) => void\n  getIdentityProfile:(did?: string) => Promise<IdentityProfile>\n}\n\nconst defaultAgent = createAgent<Agent>({\n  plugins: [ new AgentRestClient({ url, enabledMethods, headers: { Authorization: 'Bearer ' + apiKey} })],\n})\n\n\nexport const AgentContext = React.createContext<Context>({\n  agent: defaultAgent,\n  authenticatedDid: null,\n  setApiKey: (key: string) => {},\n  setUrl: (url: string) => {},\n  getIdentityProfile: (did?: string) => Promise.reject(),\n  url: '',\n  apiKey: ''\n});\nexport const useAgent = () => useContext(AgentContext);\n\nconst AgentProvider: React.FC = ({children}) => {\n\n  const [authenticatedDid] = useState<string|null>(null)\n  const [agent, setAgent] = useState<TAgent<Agent>>(defaultAgent)\n  const [url, setUrl] = useState<string>(`${process.env.REACT_APP_AGENT_URL}`)\n  const [apiKey, setApiKey] = useState<string>(`${process.env.REACT_APP_AGENT_API_KEY}`)\n\n\n  useEffect(() => {\n    const configureAgent = async () => {\n      const agent = createAgent<Agent>({\n        plugins: [\n          new AgentRestClient({\n            url, \n            enabledMethods,\n            headers: {\n              'Authorization': 'Bearer ' + apiKey\n            },\n          }),\n        ],\n      })\n      setAgent(agent)  \n\n    }\n    if (url) {\n      configureAgent()\n    }\n  \n\n  }, [url, apiKey])\n\n\n  const getIdentityProfile = async (did?: string): Promise<IdentityProfile> => {\n    if (!did) return Promise.reject()\n    const result = await agent.dataStoreORMGetVerifiableCredentials({\n      where: [\n        { column: 'type', value: ['VerifiableCredential,Profile']},\n        { column: 'subject', value: [did]}\n      ],\n      order: [\n        { column: 'issuanceDate', direction: 'DESC' }\n      ]\n    })\n    if (result.length > 0) {\n      const {name, nickname, picture } = result[0].verifiableCredential.credentialSubject\n      return { did, name, nickname, picture }\n    } else {\n      return { did, name: did, nickname: did }\n    }\n  }\n\n  return (<AgentContext.Provider value={{\n    agent,\n    getIdentityProfile,\n    authenticatedDid,\n    setUrl,\n    setApiKey,\n    url,\n    apiKey\n  }}>\n    {children}\n  </AgentContext.Provider>)\n}\nexport default AgentProvider\n\n","import React from \"react\";\nimport { Typography, CardContent, Link, makeStyles } from \"@material-ui/core\";\nimport Avatar from '@material-ui/core/Avatar';\nimport { VerifiableCredential } from \"daf-core\";\nimport { IdentityProfile } from \"../../types\";\n\n\ninterface Props {\n  credential: VerifiableCredential\n  issuer: IdentityProfile\n  subject?: IdentityProfile\n  type: 'summary' | 'details'\n}\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    width: 16,\n    height: 16,\n    display: 'inline-block',\n  },\n  link: {\n    display: 'inline-block',\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction PostCredential(props: Props) {\n  const { credential, issuer, subject } = props\n  const classes = useStyles();\n  \n  return (\n    <CardContent>\n      {credential.credentialSubject.comment && \n        <Typography variant='body1' color='textPrimary'>\n          {subject && issuer.did !== subject.did && <Link href={'/identity/' + subject.did} className={classes.link}>\n            <Avatar variant='rounded' src={subject.picture} className={classes.avatar}/> {subject.nickname}\n            </Link>}\n          {credential.credentialSubject.comment}\n        </Typography>}\n        \n    </CardContent>    \n  );\n}\n\nexport default PostCredential;","import React from \"react\";\nimport { Typography, CardContent, Grid } from \"@material-ui/core\";\nimport Avatar from '@material-ui/core/Avatar';\nimport { VerifiableCredential } from \"daf-core\";\nimport { IdentityProfile } from \"../../types\";\n\ninterface Props {\n  credential: VerifiableCredential\n  issuer: IdentityProfile\n  subject?: IdentityProfile\n  type: 'summary' | 'details'\n}\n\nfunction ProfileCredential(props: Props) {\n  const { credential, issuer, subject } = props\n  \n  return (\n    <CardContent>\n      <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" gutterBottom>\n      {issuer.name} updated profile for {subject?.name}\n      </Typography>\n\n      <Grid container spacing={1}>\n        {Object.keys(credential.credentialSubject).map(type => (\n          <Grid item key={type} xs={12} sm={type === 'id' ? 12 : 6}>\n            <Typography variant='caption' color='textSecondary'>{type}</Typography>\n            {type !== 'picture' && <Typography variant='body2'>{credential.credentialSubject[type]}</Typography>}\n            {type === 'picture' && <Avatar src={credential.credentialSubject[type]}/>}\n          </Grid>\n        ))}\n      </Grid>\n\n    </CardContent>    \n  );\n}\n\nexport default ProfileCredential;","import React from \"react\";\nimport { Typography, CardContent } from \"@material-ui/core\";\nimport { VerifiableCredential } from \"daf-core\";\nimport { IdentityProfile } from \"../../types\";\n\ninterface Props {\n  credential: VerifiableCredential\n  issuer: IdentityProfile\n  subject?: IdentityProfile\n  type: 'summary' | 'details'\n}\n\nfunction ReactionCredential(props: Props) {\n  const { credential } = props\n  return (\n    <CardContent>\n      {credential.credentialSubject.emoji && \n        <Typography variant='body1' color='textPrimary'>\n          {credential.credentialSubject.emoji}\n        </Typography>}      \n    </CardContent>    \n  )\n}\n\nexport default ReactionCredential","import React from \"react\";\nimport { Typography, CardContent } from \"@material-ui/core\";\nimport { VerifiableCredential } from \"daf-core\";\nimport { IdentityProfile } from \"../../types\";\n\ninterface Props {\n  credential: VerifiableCredential\n  issuer: IdentityProfile\n  subject?: IdentityProfile\n  type: 'summary' | 'details'\n}\n\nfunction MessageCredential(props: Props) {\n  const { credential } = props  \n  return (\n    <CardContent>\n      {credential.credentialSubject.content && \n        <Typography variant='body1' color='textPrimary'>\n          {credential.credentialSubject.content}\n        </Typography>}\n    </CardContent>    \n  )\n}\n\nexport default MessageCredential","import React, { useState, useEffect } from \"react\";\nimport { CardHeader, LinearProgress } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionAreaLink from \"./Nav/CardActionAreaLink\";\nimport Avatar from '@material-ui/core/Avatar';\nimport { formatDistanceToNow } from 'date-fns'\nimport { VerifiableCredential } from \"daf-core\";\nimport { IdentityProfile } from \"../types\";\nimport { useAgent } from '../agent'\n\nimport PostCredential from \"./CredentialCardContent/PostCredential\";\nimport ProfileCredential from \"./CredentialCardContent/ProfileCredential\";\nimport ReactionCredential from \"./CredentialCardContent/ReactionCredential\";\nimport MessageCredential from \"./CredentialCardContent/MessageCredential\";\n\ninterface Props {\n  credential: VerifiableCredential\n  type: 'summary' | 'details'\n}\n\nfunction CredentialPostCard(props: Props) {\n  const { credential } = props\n  const { agent, getIdentityProfile } = useAgent()\n  const [ loading, setLoading ] = useState(false)\n  const [ issuer, setIssuer ] = useState<IdentityProfile>({ did: credential.issuer.id })\n  const [ subject, setSubject ] = useState<IdentityProfile|undefined>(undefined)\n  \n  useEffect(() => {\n    setLoading(true)\n    Promise.all<IdentityProfile, IdentityProfile>([\n      getIdentityProfile(credential.issuer.id),\n      getIdentityProfile(credential.issuer.id)\n    ])\n    .then(profiles => {\n      setIssuer(profiles[0])\n      setSubject(profiles[1])\n    })\n    .finally(() => setLoading(false))\n  }, [agent, getIdentityProfile, credential.issuer.id, credential.credentialSubject.id])\n\n  if (loading) {\n    return (<LinearProgress />)\n  }\n\n  let contents\n  if (credential.type.includes('Post')) {\n    contents = (<PostCredential  {...props} issuer={issuer} subject={subject} /> )\n  } else if (credential.type.includes('Profile')) {\n    contents = (<ProfileCredential  {...props} issuer={issuer} subject={subject} /> )\n  } else if (credential.type.includes('Reaction')) {\n    contents = (<ReactionCredential  {...props} issuer={issuer} subject={subject} /> )\n  } else if (credential.type.includes('Message')) {\n    contents = (<MessageCredential  {...props} issuer={issuer} subject={subject} /> )\n  } \n  \n  return (\n    <Card elevation={2}>\n      <CardActionAreaLink to={'/identity/' + issuer.did}>\n        <CardHeader\n          avatar={\n            <Avatar src={issuer.picture} />\n          }\n          title={`${issuer.name}`}\n          subheader={`${issuer.nickname} | ${formatDistanceToNow(Date.parse(credential.issuanceDate))} ago`}\n        />\n      </CardActionAreaLink>\n      <CardActionAreaLink to={ props.type === 'summary' ? `${credential.id}`.replace(`${process.env.REACT_APP_HOST}`, '') : '/identity/' + subject?.did}>\n        {contents}\n      </CardActionAreaLink>\n    </Card>\n  )\n}\n\nexport default CredentialPostCard;","import React from 'react'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Toolbar, IconButton, AppBar, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { useMobile } from './MobileProvider';\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      flexGrow: 1,\n    },\n    appBar: {\n      [theme.breakpoints.up('sm')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    box: {\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'row'\n    },\n    avatar: {\n      height: 24,\n      width: 24\n    }\n  }),\n);\n\nexport interface Props {\n  title?: string\n}\n\nconst AppBarTabs: React.FC<Props> = props => {\n  const { children } = props\n  const classes = useStyles();\n  const { mobileOpen, setMobileOpen } = useMobile();\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar} color={'inherit'}>\n      <Toolbar>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          edge=\"start\"\n          onClick={()=> setMobileOpen(!mobileOpen)}\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" noWrap className={classes.title}>\n          {props.title}  \n        </Typography>\n      </Toolbar>\n      {children}\n    </AppBar>\n  )\n}\n\nexport default AppBarTabs\n","import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CredentialCard from '../components/CredentialCard'\nimport AppBar from \"../components/Nav/AppBar\";\nimport { useAgent } from '../agent'\nimport { UniqueVerifiableCredential } from 'daf-typeorm'\n\nfunction Credentials(props: any) {\n  const { agent } = useAgent()\n  const [ loading, setLoading ] = useState(false)\n  const [ credentials, setCredentials ] = useState<Array<UniqueVerifiableCredential>>([])\n\n  useEffect(() => {\n    setLoading(true)\n    agent.dataStoreORMGetVerifiableCredentials({\n      order: [\n        { column: 'issuanceDate', direction: 'DESC' }\n      ]\n    })\n    .then(setCredentials)\n    .finally(() => setLoading(false))\n  }, [agent])\n  \n  return (\n    <Container maxWidth=\"sm\">\n      <AppBar title='Credentials' />\n      {loading && <LinearProgress />}\n      <Grid container spacing={2} justify=\"center\">\n        {credentials.map(credential => (\n          <Grid item key={credential.hash} xs={12}>\n            <CredentialCard credential={credential.verifiableCredential} type={'summary'}/>\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n}\n\nexport default Credentials;","import React, { forwardRef } from 'react'\nimport ListItem from '@material-ui/core/ListItem'\nimport { NavLink, NavLinkProps } from 'react-router-dom'\n\nexport interface Props {\n  className?: string\n  to?: string | null // because the InferProps props allows alows null value\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n  selected?: boolean\n}\n\nconst ListItemLink: React.FC<Props> = props => {\n  const { className, onClick, to, children, selected } = props\n\n  // If link is not set return the orinary ListItem\n  if (!to || typeof to !== 'string') {\n    return (\n      <ListItem\n        button\n        className={className}\n        children={children}\n        onClick={onClick}\n        selected={selected}\n      />\n    )\n  }\n\n  // Return a LitItem with a link component\n  return (\n    <ListItem\n      button\n      className={className}\n      children={children}\n      component={forwardRef((props: NavLinkProps, ref: any) => <NavLink exact {...props} innerRef={ref} />)}\n      selected={selected}\n      to={to}\n    />\n  )\n}\n\nexport default ListItemLink\n","import React, { useState, useEffect } from \"react\"\nimport { LinearProgress, ListItemAvatar, ListItemText } from \"@material-ui/core\"\nimport Avatar from '@material-ui/core/Avatar'\nimport { IdentityProfile } from \"../types\";\nimport { useAgent } from '../agent'\nimport ListItemLink from \"./Nav/ListItemLink\"\nimport Box from \"@material-ui/core/Box/Box\";\n\ninterface Props {\n  did?: string\n  type: 'summary' | 'details'\n}\n\nfunction Identity(props: Props) {\n  const { did } = props\n  const { agent, getIdentityProfile } = useAgent()\n  const [ loading, setLoading ] = useState(false)\n  const [ identity, setIdentity ] = useState<IdentityProfile|undefined>(undefined)\n\n  useEffect(() => {\n    if (did) {\n      setLoading(true)\n      getIdentityProfile(did)\n      .then(setIdentity)\n      .finally(() => setLoading(false))\n    }\n  }, [agent, getIdentityProfile, did])\n\n  if (loading) {\n    return (<LinearProgress />)\n  } else if (identity) {    \n    return (\n      <ListItemLink to={'/identity/'+ identity.did}>\n        <ListItemAvatar>\n          <Avatar src={identity.picture} />\n        </ListItemAvatar>\n      <ListItemText \n        primary={identity.name}\n        secondary={identity.nickname} \n        />\n    </ListItemLink>);\n  } else {\n    return <Box />\n  }\n}\n\nexport default Identity;","import React, { useEffect, useState } from \"react\";\nimport { List } from \"@material-ui/core\";\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport AppBar from \"../components/Nav/AppBar\";\nimport { useAgent } from '../agent'\nimport { IIdentity } from \"daf-core\";\nimport Identity from '../components/Identity'\n\nfunction Identities(props: any) {\n  const { agent } = useAgent()\n  const [ loading, setLoading ] = useState(false)\n  const [ identities, setIdentities ] = useState<Array<Partial<IIdentity>>>([])\n\n  useEffect(() => {\n    setLoading(true)\n    agent.dataStoreORMGetIdentities()\n    .then(setIdentities)\n    .finally(() => setLoading(false))\n  }, [agent])\n\n  return (\n    <Container maxWidth=\"sm\">\n      <AppBar title='Connections' />\n      {loading && <LinearProgress />}\n      <List >\n        {identities.map(identity => (\n          <Identity \n            key={identity.did} \n            did={identity.did} \n            type='summary'\n          />\n        ))}\n      </List>\n    </Container>\n  )\n}\n\nexport default Identities;","import React, { useEffect, useState } from \"react\";\nimport { List } from \"@material-ui/core\";\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport AppBar from \"../components/Nav/AppBar\";\nimport { useAgent } from '../agent'\nimport { IIdentity } from \"daf-core\";\nimport Identity from '../components/Identity'\n\nfunction ManagedIdentities(props: any) {\n  const { agent } = useAgent()\n  const [ loading, setLoading ] = useState(false)\n  const [ identities, setIdentities ] = useState<Array<IIdentity>>([])\n\n  useEffect(() => {\n    setLoading(true)\n    agent.identityManagerGetIdentities()\n    .then(setIdentities)\n    .finally(() => setLoading(false))\n  }, [agent])\n\n  return (\n    <Container maxWidth=\"sm\">\n      <AppBar title='Managed identities' />  \n      {loading && <LinearProgress />}\n      <List >\n        {identities.map(identity => (\n          <Identity \n            key={identity.did} \n            did={identity.did} \n            type='summary'\n          />\n        ))}\n      </List>\n    </Container>\n  )\n}\n\nexport default ManagedIdentities;","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useAgent } from \"../agent\";\nimport { useHistory } from \"react-router-dom\";\nimport { Dialog, DialogTitle, DialogContent, DialogActions, makeStyles, TextField } from \"@material-ui/core\";\nimport shortId from 'shortid'\n\ninterface Props {\n  fullScreen: boolean,\n  open: boolean,\n  onClose: any,\n  subject: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: 'auto',\n    // width: 'fit-content',\n  },\n  formControl: {\n    marginTop: theme.spacing(2),\n    minWidth: 120,\n  },\n  select: {\n    height: '48px',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  avatar: {\n    marginTop: theme.spacing(2),\n    height: 30,\n    width: 30,\n  },\n  formControlLabel: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nfunction ProfileDialog(props: Props) {\n  const classes = useStyles()\n  const history = useHistory()\n  const { agent, authenticatedDid } = useAgent()\n\n  const [name, setName] = useState<string|undefined>('')\n  const [nickname, setNickname] = useState<string|undefined>('')\n\n  const saveProfileInfo = async () => {\n    try {\n      if (!authenticatedDid) throw Error('Not authenticated')\n\n      const credentialSubject = {\n        id: props.subject,\n      } as { \n        id: string,\n        name?: string,\n        nickname?: string,\n      }\n\n      if (name) credentialSubject['name'] = name\n      if (nickname) credentialSubject['nickname'] = nickname\n\n      const uniqId = shortId.generate()\n      await agent.createVerifiableCredential({\n        credential: {\n          issuer: { id: authenticatedDid },\n          '@context': ['https://www.w3.org/2018/credentials/v1'],\n          type: ['VerifiableCredential', 'Profile'],\n          issuanceDate: new Date().toISOString(),\n          id: process.env.REACT_APP_HOST + '/c/' + uniqId,\n          credentialSubject,\n        },\n        save: true,\n        proofFormat: 'jwt',\n      })\n\n      props.onClose()\n      history.push('/c/'+ uniqId)\n\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Dialog\n        fullScreen={props.fullScreen}\n        open={props.open}\n        onClose={props.onClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Update profile information</DialogTitle>\n        <DialogContent>\n        <form className={classes.form}>\n\n          <TextField\n            id=\"name\"\n            label=\"Name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            fullWidth\n          />\n\n          <TextField\n            id=\"nickname\"\n            label=\"Nickname\"\n            type=\"text\"\n            value={nickname}\n            onChange={(e) => setNickname(e.target.value)}\n            fullWidth\n          />\n\n        </form>\n\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={props.onClose} color=\"default\">\n            Cancel\n          </Button>\n          <Button onClick={saveProfileInfo} color=\"primary\" autoFocus>\n            Sign\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n\n\n}\n\nexport default ProfileDialog;","import React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, makeStyles, Card, CardContent, CardActions, Button, IconButton, Collapse, useTheme, useMediaQuery, Box, Tabs, Tab } from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\nimport Avatar from '@material-ui/core/Avatar';\nimport CredentialCard from '../components/CredentialCard'\nimport clsx from 'clsx';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport ProfileDialog from \"../components/ProfileDialog\"\nimport AppBar from \"../components/Nav/AppBar\";\nimport { UniqueVerifiableCredential } from \"daf-typeorm\";\nimport { useAgent } from \"../agent\";\nimport { IdentityProfile } from \"../types\";\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    width: 150,\n    height: 150\n  },\n  header: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2)\n  },\n  collapse: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2)\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n}));\n\nfunction Identity(props: any) {\n  const { did } = useParams<{ did: string }>()\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n  const theme = useTheme();\n  const { agent, getIdentityProfile } = useAgent()\n  const [ identity, setIdentity ] = useState<IdentityProfile | undefined>(undefined)\n  const [ loading, setLoading ] = useState(false)\n  const [ credentials, setCredentials ] = useState<Array<UniqueVerifiableCredential>>([])\n\n\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n  const [openProfileModal, setOpenProfileModal] = React.useState(false);\n  \n  const handleOpenProfileModal = () => {\n    setOpenProfileModal(false);\n  };\n\n  const handleCloseProfileModal = () => {\n    setOpenProfileModal(false);\n  };\n\n  useEffect(() => {\n    getIdentityProfile(did)\n    .then(setIdentity)\n  }, [agent, getIdentityProfile, did])\n\n  useEffect(() => {\n    setLoading(true)\n    agent.dataStoreORMGetVerifiableCredentials({      \n      where: [ \n        { column: value === 0 ? 'issuer' : 'subject', value: [did] },\n      ]\n    })\n    .then(setCredentials)\n    .finally(() => setLoading(false))\n  }, [agent, getIdentityProfile, value, did])\n\n  return (\n    <Container maxWidth=\"sm\">\n      <AppBar title={identity?.name || ''}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n        >\n          <Tab label=\"Issued\" />\n          <Tab label=\"Received\" />\n        </Tabs>\n      </AppBar>\n      {loading && <LinearProgress />}\n      <Grid container spacing={2} justify=\"center\">\n      <Grid item xs={12}>\n          <Card variant='outlined'>\n            <CardContent className={classes.header}>\n\n              <Avatar\n                className={classes.avatar}\n                src={identity?.picture}\n                />\n              <Typography variant='h5'>{identity?.name}</Typography>\n              <Typography variant='h6'>{identity?.nickname}</Typography>\n            </CardContent>\n            <CardActions>\n            \n            <IconButton\n              className={clsx(classes.expand, {\n                [classes.expandOpen]: expanded,\n              })}\n              onClick={() => setExpanded(!expanded)}\n              aria-expanded={expanded}\n              aria-label=\"show more\"\n            >\n              <ExpandMoreIcon />\n            </IconButton>\n            </CardActions>\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit >\n              <Box className={classes.collapse}>\n\n                <Typography variant='subtitle2' color='textSecondary'>{identity?.did}</Typography>\n                <Button size=\"small\" color=\"primary\" onClick={handleOpenProfileModal}>\n                  Profile\n                </Button>\n              </Box>\n            </Collapse>\n          </Card>\n        </Grid>\n\n\n        {credentials.map(credential => (\n          <Grid item key={credential.hash} xs={12}>\n            <CredentialCard credential={credential.verifiableCredential} type='summary' />\n          </Grid>\n        ))}\n      </Grid>\n      {identity && <ProfileDialog\n        fullScreen={fullScreen}\n        open={openProfileModal}\n        onClose={handleCloseProfileModal}\n        subject={identity.did}\n      />}\n\n    </Container>\n  );\n}\n\nexport default Identity;","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CredentialCard from \"../components/CredentialCard\";\nimport AppBar from \"../components/Nav/AppBar\";\nimport { useAgent } from '../agent'\nimport { UniqueVerifiableCredential } from 'daf-typeorm'\nimport { Grid } from \"@material-ui/core\";\n\n\nfunction Credential(props: any) {\n  const { id } = useParams<{ id: string }>()\n  const { agent } = useAgent()\n  const [ loading, setLoading ] = useState(false)\n  const [ credentials, setCredentials ] = useState<Array<UniqueVerifiableCredential>>([])\n  useEffect(() => {\n    setLoading(true)\n    agent.dataStoreORMGetVerifiableCredentials({      \n      where: [ { column: 'id', value: [process.env.REACT_APP_HOST + '/c/' + id]}]\n    })\n    .then(setCredentials)\n    .finally(() => setLoading(false))\n  }, [agent, id])\n\n  return (\n    <Container maxWidth=\"sm\">\n      <AppBar/>\n      {loading && <LinearProgress />}\n      <Grid container spacing={2} justify=\"center\">\n        {credentials.map(credential => (\n          <Grid item key={credential.hash} xs={12}>\n            <CredentialCard credential={credential.verifiableCredential} type='details' />\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n}\n\nexport default Credential;","import React from \"react\";\nimport Container from '@material-ui/core/Container';\nimport AppBar from \"../components/Nav/AppBar\";\nimport { useAgent } from '../agent'\nimport { Grid, TextField } from \"@material-ui/core\";\n\nfunction Settings(props: any) {\n  const { apiKey, url, setApiKey, setUrl } = useAgent()\n\n  return (\n    <Container maxWidth=\"sm\">\n      <AppBar title='Settings' />\n      <Grid container spacing={2} justify=\"center\">\n          <Grid item xs={12}>\n            <TextField\n              id=\"url\"\n              label=\"Cloud Agent URL\"\n              type=\"text\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              fullWidth\n            />\n            <TextField\n              id=\"apiKey\"\n              label=\"API Key\"\n              type=\"password\"\n              value={apiKey}\n              onChange={(e) => setApiKey(e.target.value)}\n              fullWidth\n            />\n          </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default Settings;","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PeopleIcon from '@material-ui/icons/People';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport { useMobile } from './components/Nav/MobileProvider';\n\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n  Route,\n  Redirect,\n  Switch,\n  useRouteMatch\n} from 'react-router-dom' \n\nimport Credentials from './views/Credentials'\nimport Identities from './views/Identities'\nimport ManagedIdentities from './views/ManagedIdentities'\nimport Identity from './views/Identity'\nimport Credential from './views/Credential'\nimport Settings from './views/Settings'\nimport ListItemLink from './components/Nav/ListItemLink'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    fab: {\n      position: 'fixed',\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n    drawer: {\n      [theme.breakpoints.up('sm')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    appBar: {\n      [theme.breakpoints.up('sm')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    content: {\n      flexGrow: 1,\n      paddingTop: theme.spacing(8),\n    },\n  }),\n);\n\n\nexport default function ResponsiveDrawer() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { mobileOpen, setMobileOpen } = useMobile();\n  const credentialsMatch = useRouteMatch(\"/credentials\");\n  const identitiesMatch = useRouteMatch(\"/identities\");\n  const managedIdentitiesMatch = useRouteMatch(\"/managed-identities\");\n  const settingsMatch = useRouteMatch(\"/settings\");\n  const identityMatch = useRouteMatch(\"/identity/:did\");\n\n  \n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <List>\n      <Divider />\n        \n        <ListItemLink to={'/credentials'} \n          selected={credentialsMatch !== null}\n          >\n          <ListItemIcon><DashboardIcon /></ListItemIcon>\n          <ListItemText primary={'Credentials'} />\n        </ListItemLink>\n        <ListItemLink\n          to={'/identities'}\n          selected={identitiesMatch !== null || identityMatch !== null}\n          >\n          <ListItemIcon><PeopleIcon /></ListItemIcon>\n          <ListItemText primary={'Connections'} />\n        </ListItemLink>\n        <ListItemLink\n          to={'/managed-identities'}\n          selected={managedIdentitiesMatch !== null}\n          >\n          <ListItemIcon><PeopleIcon /></ListItemIcon>\n          <ListItemText primary={'Managed identities'} />\n        </ListItemLink>\n        <ListItemLink\n          to={'/settings'}\n          selected={settingsMatch !== null}\n          >\n          <ListItemIcon><SettingsIcon /></ListItemIcon>\n          <ListItemText primary={'Settings'} />\n        </ListItemLink>\n\n      </List>\n    </div>\n  );\n\n  const container = window.document.body\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        \n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/credentials\" />} />\n          <Route path={'/credentials'} component={Credentials} />\n          <Route path={'/settings'} component={Settings} />\n          <Route path={'/identities'} component={Identities} />\n          <Route path={'/managed-identities'} component={ManagedIdentities} />\n          <Route path={'/identity/:did'} component={Identity} />\n          <Route path={'/c/:id'} component={Credential} />\n        </Switch>\n      </main>\n    </div>\n  );\n}","import { createMuiTheme } from '@material-ui/core/styles';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport green from '@material-ui/core/colors/green';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: deepOrange,\n    secondary: green,\n  },\n  shape: {\n    borderRadius: 10\n  }\n  \n});\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { BrowserRouter } from 'react-router-dom' \nimport App from './App';\nimport theme from './theme';\nimport MobileProvider from './components/Nav/MobileProvider';\nimport AgentProvider from './agent';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <AgentProvider>\n        <MobileProvider>\n          <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <App />\n          </ThemeProvider>\n        </MobileProvider>\n      </AgentProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}